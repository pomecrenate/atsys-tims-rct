<%--
	////////////////////////////////////////////////////////////
	// 프로그램명 : Evl1102e.jsp
	// 설명 : 평가표관리
	// 작성자 : 이예찬
	// 일자 : 2025.05.13
	//////////////////////////////////////////////////////////// 
--%>
<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<%@ include file="/WEB-INF/jsp/tims/common/taglib/Taglib.jsp" %>
<jsp:useBean id="cmmCdConstants" class="com.atsys.base.util.CmmCdConstants"/>

<c:set var="svnm" value="${serviceBathPath}/evl1102e"/>    
<c:set var="svnmSearch" value="${svnm}/search"/>    
<c:set var="svnmGetSheet" value="${svnm}/getSheet"/>    
<c:set var="svnmSave" value="${svnm}/save"/>
<c:set var="svnmSheetPop" value="${svnm}/popup/sheetSelect"/>

<div class="x_panel_wrap">  
	<div class="x_panel">		
		<div class="search_condition"> 
			<div class="condition_list" style="display: flex; align-items: center; gap: 10px;">
				<dl style="margin-bottom: 0;">
					<dt><label>채용공고 차수</label></dt>
					<dd><div id="step"></div></dd>
				</dl>
				<dl style="margin-bottom: 0;">
					<dt><label>채용구분</label></dt>
					<dd><div id="ntcTypeNm"></div></dd>
				</dl> 
				<dl style="margin-bottom: 0;">
					<dt><label>교직원구분</label></dt>
					<dd>
						<div class="radio-group"></div>
					</dd>
				</dl> 
				<button class="n_btn btn_md btn_c02" data-url="evl1100e" type="button" style="margin-left: auto;">돌아가기</button>
			</div>
		</div>
	</div> 
	
	<div class="x_content">
		<div class="description">※ 교직원구분을 클릭해 해당 심사표를 작성해주세요.</div>
		<div class="description">※ 직원 심사표일 경우, 점수기준 입력란에 정량점수를 입력하시면 됩니다.</div>
		
		<div class="list_top">
			<div class="lft-area">
				<p class="list_title">평가표</p>
			</div>
			<div class="rgt-area">
				<div class="btn-group">
					<button data-action="loadSheet" type="button" class="n_btn btn_md btn_c01"><i class="fas fa-file-import"></i> 심사표 불러오기</button>
					<button data-action="addRow" type="button" class="n_btn btn_md btn_c01"><i class="fas fa-plus"></i> 추가</button>
					<button data-action="deleteRow" type="button" class="n_btn btn_md btn_c05"><i class="fas fa-minus"></i> 삭제</button>
					<button data-action="saveSheet" type="button" class="n_btn btn_md btn_c02"><i class="fas fa-save"></i> 저장</button>
				</div>
			</div>
		</div>
		<div class="content_list">
			<input type="hidden" id="ntcCd" name="ntcCd" />
			<input type="hidden" id="stepCd" name="stepCd" />
			<input type="hidden" id="sheetCd" name="sheetCd" />
			<table class="table" id="sheet-table">
				<thead>
					<tr>
						<th><input type="checkbox" /></th>
						<th>순서</th>
						<th>심사구분</th>
						<th>항목</th>
						<th>배점</th>
						<th>평가지표</th>
						<th>세부배점</th>
						<th>점수기준</th>
					</tr>
				</thead>
				<tbody id="sheet-tbody"></tbody>
			</table> 
		</div>
	</div> 
</div>

<script>
// 테이블 컬럼 정의
const sheetColumns = [
    { type: "checkbox", name: "check" },
    { type: "text", name: "sortOrder" },
    { type: "select", name: "qstType", options: ["기초심사", "전공심사", "세미나", "면접"] },
    { type: "text", name: "qstNm" },
    { type: "text", name: "qstScore" },
    { type: "text", name: "indNm" },
    { type: "text", name: "indScore" },
    { type: "text", name: "scoreCriteria" }
];

$(document).ready(function() {
    setParameters();
    initEventListeners();
    setupSortOrderChangeHandler();
    loadData();
});

// URL 파라미터 설정
function setParameters() {
    const params = TimsUtil.paramToMap(location.search);
    $('#ntcCd').val(params.ntcCd || '');
    $('#stepCd').val(params.stepCd || '');
}

// 이벤트 리스너 초기화
function initEventListeners() {
    // 돌아가기 버튼
    $(document).on('click', 'button[data-url]', function() {
        location.href = '${serviceBathPath}/' + $(this).data('url');
    });
    
    // 버튼 이벤트 처리
    $(document).on("click", "button[data-action]", function() {
        const action = $(this).data('action');
        
        switch(action) {
            case 'loadSheet':
                openSheetPopup();
                break;
                
            /* case 'addRow':
                addRow();
                break;
                
            case 'deleteRow':
                deleteRow();
                break;
                
            case 'saveSheet':
                saveSheet();
                break; */
        }
    });

    // 교직원구분 라디오 버튼 선택 시 이벤트
    $(document).on('change', 'input[name="staffType"]', function() {
        loadSheetData($(this).val());
    });
    
    // 숫자 입력 필드 제한 (순서, 배점, 세부배점)
    $(document).on('input', 'input[name="sortOrder"], input[name="qstScore"], input[name="indScore"]', function() {
        $(this).val(TimsUtil.getNumberOnly($(this).val()));
    });
}

// 순서 입력 값 변경 감지
function setupSortOrderChangeHandler() {
    // 순서 입력 필드의 change 이벤트 리스너 추가
    $(document).on('change', 'input[name="sortOrder"]', function() {
        const $row = $(this).closest('tr');
        const newOrder = parseInt($(this).val()) || 1;
        const $tbody = $('#sheet-tbody');
        const rowCount = $tbody.find('tr').length;
        
        // 유효한 범위로 조정 (1 ~ 행 개수)
        newOrder = Math.max(1, Math.min(newOrder, rowCount));
        
        // 현재 모든 행 가져오기
        const $rows = $tbody.find('tr').toArray();
        
        // 이동할 행을 제외한 나머지 행들
        const otherRows = $rows.filter(r => r !== $row[0]);
        
        // 새 테이블 구성
        $tbody.empty();
        
        // 행 재배치
        for (let i = 1; i <= rowCount; i++) {
            if (i === newOrder) {
                // 이동할 행 삽입
                $tbody.append($row);
            } else {
                // 다른 행 삽입
                const nextRow = otherRows.shift();
                if (nextRow) {
                    $tbody.append(nextRow);
                }
            }
        }
        
        // 모든 행의 순서 값 재설정
        updateAllRowNumbers();
    });
}

// 모든 행의 순서 번호 업데이트
function updateAllRowNumbers() {
    $('#sheet-tbody tr').each(function(index) {
        $(this).find('input[name="sortOrder"]').val(index + 1);
    });
}

// 초기 데이터 로드
function loadData() {
    const params = {
        ntcCd: $('#ntcCd').val(),
        stepCd: $('#stepCd').val()
    };
    
    const obj = TimsUtil.getObject("${svnmSearch}", params, false);
    if (obj) {
        // 상단 패널 정보 설정 (첫 번째 항목의 정보 사용)
        const stepInfo = obj.list[0];
        $('#step').text(stepInfo.step);
        $('#ntcTypeNm').text(stepInfo.ntcTypeNm);
        
        // 교직원구분 라디오 버튼 생성
        generateStaffTypeRadios(obj.list);
    }
}

// 교직원구분 라디오 버튼 생성
function generateStaffTypeRadios(staffTypeList) {
    const $radioGroup = $('.radio-group');
    $radioGroup.empty();
    
    if (staffTypeList && staffTypeList.length > 0) {
        staffTypeList.forEach((item, index) => {
            const $label = $('<label>').addClass('radio-inline');
            const $radio = $('<input>')
                .attr('type', 'radio')
                .attr('name', 'staffType')
                .attr('value', item.staffType);
            
            if (index === 0) {
                $radio.prop('checked', true);
                // 첫 번째 교직원구분으로 평가표 로드
                setTimeout(() => loadSheetData(item.staffType), 100);
            }
            
            $label.append($radio).append(' ' + item.staffTypeNm);
            $radioGroup.append($label);
        });
    }
}

// 평가표 데이터 로드
function loadSheetData(staffType) {
    if (!staffType) return;
    
    const params = {
        stepCd: $('#stepCd').val(),
        staffType: staffType
    };
    
    const obj = TimsUtil.getObject("${svnmGetSheet}", params, false);
    if (obj) {
        $('#sheetCd').val(obj.sheetCd || '');
        RctUtil.renderEditableTable("sheet-tbody", sheetColumns, obj.qstList || [], null, null, "qstCd");
    }
}

// 행 추가 - 순서 번호를 위에서부터 오름차순으로 설정
function addRow() {
    if (!$('input[name="staffType"]:checked').val()) {
        alert("교직원구분을 먼저 선택해주세요.");
        return;
    }
    
    // 새 행 추가
    RctUtil.insertRow(sheetColumns, '#sheet-table');
    
    // 모든 행의 순서 번호를 위에서부터 다시 설정
    updateAllRowNumbers();
}

// 행 삭제 및 순서 재정렬
function deleteRow() {
    // RctUtil의 행 삭제 함수 호출
    const deleted = RctUtil.deleteSelectedRows('#sheet-table');
    
    // 삭제가 성공했다면 남은 행들의 순서 재정렬
    if (deleted) {
        // 모든 행의 순서 번호를 위에서부터 다시 설정
        updateAllRowNumbers();
    }
}

// 심사표 저장
function saveSheet() {
    const staffType = $('input[name="staffType"]:checked').val();
    if (!staffType) {
        alert("교직원구분을 먼저 선택해주세요.");
        return;
    }
    
    // 유효성 검사
    if (!validateSheet()) return;
    
    // 테이블 데이터 수집
    const qsts = [];
    $('#sheet-tbody tr').each(function() {
        const qst = {};
        $(this).find('input, select').each(function() {
            const name = $(this).attr('name');
            if (name && name !== 'check') {
                let value = $(this).val();
                
                // 숫자 필드 처리
                if (name === 'qstScore' || name === 'indScore' || name === 'sortOrder') {
                    value = parseInt(value) || 0;
                }
                
                qst[name] = value;
            }
        });
        
        const qstCd = $(this).data('id');
        if (qstCd) {
            qst.qstCd = qstCd;
        }
        
        qsts.push(qst);
    });
    
    const data = {
        sheet: {
            stepCd: $('#stepCd').val(),
            staffType: staffType,
            sheetCd: $('#sheetCd').val()
        },
        qsts: qsts
    };
    
    const obj = TimsUtil.getObject("${svnmSave}", data, true);
    
    if (obj) {
        let message = "평가표가 저장되었습니다.\n";
        
        if (obj.insertCnt > 0) message += "- 추가: " + obj.insertCnt + "건\n";
        if (obj.deleteCnt > 0) message += "- 삭제: " + obj.deleteCnt + "건\n";
        if (obj.updateCnt > 0) message += "- 수정: " + obj.updateCnt + "건";
        
        alert(message);
        loadSheetData(staffType);
    } else {
        alert("저장 중 오류가 발생했습니다.");
    }
}

// 평가표 유효성 검사
function validateSheet() {
    let isValid = true;
    
    $('#sheet-tbody tr').each(function() {
        const $tr = $(this);
        
        // 필수 필드 검사
        const sortOrder = $tr.find('input[name="sortOrder"]').val();
        const qstType = $tr.find('select[name="qstType"]').val();
        const qstNm = $tr.find('input[name="qstNm"]').val();
        const qstScore = $tr.find('input[name="qstScore"]').val();
        const indNm = $tr.find('input[name="indNm"]').val();
        const indScore = $tr.find('input[name="indScore"]').val();
        const scoreCriteria = $tr.find('input[name="scoreCriteria"]').val();
        
        if (!sortOrder || !qstType || !qstNm || !qstScore || !indNm || !indScore) {
            alert("모든 항목을 입력해주세요.");
            isValid = false;
            return false;
        }
        
        // 숫자 필드 검사
        if (isNaN(qstScore) || isNaN(indScore) || isNaN(sortOrder)) {
            alert("배점, 세부배점, 순서는 숫자로 입력해주세요.");
            isValid = false;
            return false;
        }
    });
    
    return isValid;
}

// 심사표 팝업 열기
function openSheetPopup() {
    const url = '${svnmSheetPop}';
    RctUtil.urlDialog('심사표 불러오기', url, 800, 600);
}

// 심사표 선택 후 처리 (팝업에서 호출)
function handleSelectedSheet(sheetData) {
    if (sheetData && sheetData.qstList) {
        // 선택한 평가표의 문항 목록만 로드
        RctUtil.renderEditableTable("sheet-tbody", sheetColumns, sheetData.qstList || [], null, null, "qstCd");
    }
}
</script>